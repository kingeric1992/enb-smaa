// This is a demo file on bare-bone enbsmaa.fx implementation

//+++++++++++++++++++++++++++++
//external enb parameters, do not modify
//+++++++++++++++++++++++++++++
//x = generic timer in range 0..1, period of 16777216 ms (4.6 hours), y = average fps, w = frame time elapsed (in seconds)
float4	Timer;
//x = Width, y = 1/Width, z = aspect, w = 1/aspect, aspect is Width/Height
float4	ScreenSize;
//x = current weather index, y = outgoing weather index, z = weather transition, w = time of the day in 24 standart hours. Weather index is value from weather ini file, for example WEATHER002 means index==2, but index==0 means that weather not captured.
float4	Weather;
//x = dawn, y = sunrise, z = day, w = sunset. Interpolators range from 0..1
float4	TimeOfDay1;
//x = dusk, y = night. Interpolators range from 0..1
float4	TimeOfDay2;
//changes in range 0..1, 0 means that night time, 1 - day time
float	ENightDayFactor;
//changes 0 or 1. 0 means that exterior, 1 - interior
float	EInteriorFactor;
//changes in range 0..1, 0 means full quality, 1 lowest dynamic quality (0.33, 0.66 are limits for quality levels)
float   EAdaptiveQualityFactor;
// x = current weather index, .y - outgoing weather index, .z - weather transition, .w - time of the day in 24 standard hours.
// Weather index is value from _weatherlist.ini, for example WEATHER002 means index==2, but index==0 means that weather not captured.
float4  WeatherAndTime;

//+++++++++++++++++++++++++++++
//external enb debugging parameters for shader programmers, do not modify
//+++++++++++++++++++++++++++++
//keyboard controlled temporary variables. Press and hold key 1,2,3...8 together with PageUp or PageDown to modify. By default all set to 1.0
float4	tempF1, tempF2, tempF3; //1, 2, 3, 4, 5, 6, 7, 8, 9, 0
// xy = cursor position in range 0..1 of screen;
// z = is shader editor window active;
// w = mouse buttons with values 0..7 as follows:
//    0 = none
//    1 = left
//    2 = right
//    3 = left+right
//    4 = middle
//    5 = left+middle
//    6 = right+middle
//    7 = left+right+middle (or rather cat is sitting on your mouse)
float4	tempInfo1;
// xy = cursor position of previous left mouse button click
// zw = cursor position of previous right mouse button click
float4	tempInfo2;

//+++++++++++++++++++++++++++++
//mod parameters, do not modify
//+++++++++++++++++++++++++++++
texture2D			texOriginal;
texture2D			texColor;
texture2D           texNoise;
texture2D			texDepth;

//temporary textures which can be set as render target for techniques via annotations like <string RenderTarget="RenderTargetRGBA32";>
texture2D			RenderTargetRGBA32; //R8G8B8A8 32 bit ldr format
texture2D			RenderTargetRGBA64F; //R16B16G16A16F 64 bit hdr format
texture2D			RenderTargetR16F;   //R16F 16 bit hdr format with red channel only

#include "enbsmaa.fxh"

// use built-in UI helper
SMAA_UI( "SMAA", g0 )

// build custom preset
uniform uint SMAA_Stage < string UIName = "SMAA Debug Stage"; int UIMin = 0; int uiMax = 3; > = {3};
SMAA_t myPresetGet() {
    SMAA_t o = SMAA_Preset_Ultra; // can be based on existing preset;
    o.pred_enabled = false;
    o.stage = SMAA_Stage;
    return o;
}

//alternatively
uniform uint SMAA_Quality < string UIName = "SMAA Quality"; int UIMin = 0; int uiMax = 4; > = {0};
static const SMAA_t presetArr[5] = {
    SMAA_Preset_Low,
    SMAA_Preset_Medium,
    SMAA_Preset_High,
    SMAA_Preset_Ultra,
    g0
};

technique myTech    SMAA_PASS0_NAMED(  SMAA_Preset_Medium, "smaa")
technique myTech1   SMAA_PASS1(        SMAA_Preset_Medium)
technique myTech2   SMAA_PASS2(        SMAA_Preset_Medium)

// use the custom preset created by UI helper
technique myTech3   SMAA_PASS0( g0 )
technique myTech4   SMAA_PASS1( g0 )
technique myTech5   SMAA_PASS2( g0 )

technique myTech6   SMAA_PASS0( myPresetGet() )
technique myTech7   SMAA_PASS1( myPresetGet() )
technique myTech8   SMAA_PASS2( myPresetGet() )

technique myTech9   SMAA_PASS0( presetArr[SMAA_Quality] )
technique myTech10  SMAA_PASS1( presetArr[SMAA_Quality] )
technique myTech11  SMAA_PASS2( presetArr[SMAA_Quality] )